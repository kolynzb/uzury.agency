/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type BlockContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
} | {
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  caption?: string;
  attribution?: string;
  alt?: string;
  _type: "image";
  _key: string;
} | {
  _key: string;
} & Code | {
  _key: string;
} & Youtube | {
  _key: string;
} & Quote | {
  _key: string;
} & Gallery | {
  _key: string;
} & IframeEmbed | {
  _key: string;
} & Table | {
  _key: string;
} & Break>;

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  socialFields?: SocialFields;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    title?: string;
  };
};

export type Gallery = {
  _type: "gallery";
  title?: string;
  display?: "grid" | "bento" | "slider";
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
};

export type SocialFields = {
  _type: "socialFields";
  twitter?: string;
  instagram?: string;
  facebook?: string;
  youtube?: string;
};

export type IframeEmbed = {
  _type: "iframeEmbed";
  url?: string;
  title?: string;
};

export type Break = {
  _type: "break";
  style?: "break" | "readMore";
};

export type Seo = {
  _type: "seo";
  title?: string;
  description?: string;
  keywords?: string;
  canonicalUrl?: string;
  openGraphImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Quote = {
  _type: "quote";
  text?: string;
  author?: string;
  url?: string;
};

export type Youtube = {
  _type: "youtube";
  url?: string;
};

export type Team = {
  _id: string;
  _type: "team";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  role?: string;
  bio?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  socials?: Array<{
    platform?: string;
    url?: string;
    _key: string;
  }>;
  seoDescription?: string;
};

export type Partner = {
  _id: string;
  _type: "partner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  url?: string;
  seoDescription?: string;
};

export type Faq = {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  question?: string;
  answer?: string;
  category?: string;
  isFeatured?: boolean;
  seoDescription?: string;
};

export type Event = {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  date?: string;
  location?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  url?: string;
  seoDescription?: string;
};

export type Career = {
  _id: string;
  _type: "career";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  position?: string;
  slug?: Slug;
  department?: string;
  description?: string;
  requirements?: Array<string>;
  location?: string;
  applicationUrl?: string;
  seoDescription?: string;
};

export type Accolade = {
  _type: "accolade";
  title?: string;
  date?: string;
  description?: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
  url?: string;
};

export type Testimonial = {
  _type: "testimonial";
  name?: string;
  role?: string;
  testimonial?: string;
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "client";
  };
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type CaseStudyCategory = {
  _id: string;
  _type: "caseStudyCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug?: Slug;
};

export type CaseStudy = {
  _id: string;
  _type: "caseStudy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  seoKeywords?: Array<string>;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "client";
  };
  service?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "service";
  };
  industry?: string;
  isFeatured?: boolean;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "caseStudyCategory";
  }>;
  content?: BlockContent;
  tags?: Array<string>;
  summary?: string;
  url?: string;
  videoUrl?: string;
  metaDescription?: string;
};

export type Service = {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  features?: Array<string>;
  seoDescription?: string;
};

export type Client = {
  _id: string;
  _type: "client";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  };
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "blogCategory";
  }>;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body?: BlockContent;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
};

export type Series = {
  _id: string;
  _type: "series";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  meta_description?: string;
  categories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "blogCategory";
  }>;
  tags?: Array<string>;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  about?: BlockContent;
  publishedAt?: string;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  designation?: string;
  slug?: Slug;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: string;
  about?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  socials?: Array<{
    icon?: string;
    url?: string;
    _key: string;
  }>;
};

export type BlogCategory = {
  _id: string;
  _type: "blogCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  slug?: Slug;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Table = {
  _type: "table";
  rows?: Array<{
    _key: string;
  } & TableRow>;
};

export type TableRow = {
  _type: "tableRow";
  cells?: Array<string>;
};

export type SanityAssistInstructionTask = {
  _type: "sanity.assist.instructionTask";
  path?: string;
  instructionKey?: string;
  started?: string;
  updated?: string;
  info?: string;
};

export type SanityAssistTaskStatus = {
  _type: "sanity.assist.task.status";
  tasks?: Array<{
    _key: string;
  } & SanityAssistInstructionTask>;
};

export type SanityAssistSchemaTypeAnnotations = {
  _type: "sanity.assist.schemaType.annotations";
  title?: string;
  fields?: Array<{
    _key: string;
  } & SanityAssistSchemaTypeField>;
};

export type SanityAssistInstructionContext = {
  _type: "sanity.assist.instruction.context";
  reference?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "assist.instruction.context";
  };
};

export type AssistInstructionContext = {
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
};

export type SanityAssistInstructionUserInput = {
  _type: "sanity.assist.instruction.userInput";
  message?: string;
  description?: string;
};

export type SanityAssistInstructionPrompt = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  } | {
    _key: string;
  } & SanityAssistInstructionFieldRef | {
    _key: string;
  } & SanityAssistInstructionContext | {
    _key: string;
  } & SanityAssistInstructionUserInput>;
  style?: "normal";
  listItem?: never;
  markDefs?: null;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type SanityAssistInstructionFieldRef = {
  _type: "sanity.assist.instruction.fieldRef";
  path?: string;
};

export type SanityAssistInstruction = {
  _type: "sanity.assist.instruction";
  prompt?: SanityAssistInstructionPrompt;
  icon?: string;
  title?: string;
  userId?: string;
  createdById?: string;
};

export type SanityAssistSchemaTypeField = {
  _type: "sanity.assist.schemaType.field";
  path?: string;
  instructions?: Array<{
    _key: string;
  } & SanityAssistInstruction>;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | BlockContent | Settings | Gallery | SocialFields | IframeEmbed | Break | Seo | Quote | Youtube | Team | Partner | Faq | Event | Career | Accolade | Testimonial | CaseStudyCategory | CaseStudy | Service | Client | Post | Series | Author | BlogCategory | Slug | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Table | TableRow | SanityAssistInstructionTask | SanityAssistTaskStatus | SanityAssistSchemaTypeAnnotations | SanityAssistInstructionContext | AssistInstructionContext | SanityAssistInstructionUserInput | SanityAssistInstructionPrompt | SanityAssistInstructionFieldRef | SanityAssistInstruction | SanityAssistSchemaTypeField | Code;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: getAllPostsQuery
// Query: *[_type == "post"]{   ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,}
export type GetAllPostsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
}>;
// Variable: getPostMetadataQuery
// Query: *[_type == "post" && slug.current == $slug][0] {   excerpt,   "slug": slug.current,   tags,   title,   seo,   _updatedAt,   _createdAt,  author ->{      name    },  "mainImage": mainImage.asset->url,}
export type GetPostMetadataQueryResult = {
  excerpt: string | null;
  slug: string | null;
  tags: Array<string> | null;
  title: string | null;
  seo: null;
  _updatedAt: string;
  _createdAt: string;
  author: {
    name: string | null;
  } | null;
  mainImage: string | null;
} | null;
// Variable: getFeaturedPostsQuery
// Query: *[_type == "post" && isFeatured == true]{   ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,}| order(_createdAt desc)
export type GetFeaturedPostsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
}>;
// Variable: getPostBySlugQuery
// Query: *[_type == "post" && slug.current == $slug][0] {   ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,  'comments':*[     _type=="comment" &&     post._ref==^._id &&    approved == true],}
export type GetPostBySlugQueryResult = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
  comments: Array<never>;
} | null;
// Variable: getPostsUnderTagQuery
// Query: *[_type == "post" && $postTag in tags]{   ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,}
export type GetPostsUnderTagQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
}>;
// Variable: searchPostsQuery
// Query: *[_type=='post' && title match $searchTerm || description match  $searchTerm || categories match  $searchTerm  ]{   ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,}
export type SearchPostsQueryResult = Array<{
  _id: string;
  _type: "assist.instruction.context";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  context?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: null;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  body: null;
  slug: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  designation?: string;
  slug: string | null;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  bio?: string;
  about?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  socials?: Array<{
    icon?: string;
    url?: string;
    _key: string;
  }>;
  body: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "blogCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  slug: string | null;
  body: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "career";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  position?: string;
  slug: string | null;
  department?: string;
  description?: string;
  requirements?: Array<string>;
  location?: string;
  applicationUrl?: string;
  seoDescription?: string;
  body: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "caseStudy";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  seoKeywords?: Array<string>;
  slug: string | null;
  mainImage: string | null;
  client?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "client";
  };
  service?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "service";
  };
  industry?: string;
  isFeatured?: boolean;
  categories: Array<{
    _id: string;
    _type: "caseStudyCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    slug: string | null;
    image: null;
  }> | null;
  content?: BlockContent;
  tags?: Array<string>;
  summary?: string;
  url?: string;
  videoUrl?: string;
  metaDescription?: string;
  body: null;
  author: null;
} | {
  _id: string;
  _type: "caseStudyCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  description?: string;
  slug: string | null;
  body: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "client";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  description?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  body: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "event";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  date?: string;
  location?: string;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  url?: string;
  seoDescription?: string;
  body: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "faq";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  question?: string;
  answer?: string;
  category?: string;
  isFeatured?: boolean;
  seoDescription?: string;
  body: null;
  slug: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "partner";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  description?: string;
  url?: string;
  seoDescription?: string;
  body: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
} | {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
  body: null;
  slug: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
  body: null;
  slug: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "series";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  meta_description?: string;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  tags?: Array<string>;
  mainImage: string | null;
  about?: BlockContent;
  publishedAt?: string;
  body: null;
} | {
  _id: string;
  _type: "service";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  description?: string;
  icon?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  mainImage: string | null;
  features?: Array<string>;
  seoDescription?: string;
  body: null;
  categories: null;
  author: null;
} | {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  socialFields?: SocialFields;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    title?: string;
  };
  body: null;
  slug: null;
  categories: null;
  author: null;
  mainImage: null;
} | {
  _id: string;
  _type: "team";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug: string | null;
  role?: string;
  bio?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  socials?: Array<{
    platform?: string;
    url?: string;
    _key: string;
  }>;
  seoDescription?: string;
  body: null;
  categories: null;
  author: null;
  mainImage: null;
}>;
// Variable: getPostCommentsQuery
// Query: *[_type == "comment" && post->slug.current == $slug]
export type GetPostCommentsQueryResult = Array<never>;
// Variable: getCategoriesQuery
// Query: *[_type == "postCategory"]{       ...,    "image": image.asset->url,    "slug": slug.current }
export type GetCategoriesQueryResult = Array<never>;
// Variable: getBlogPostsInCategoryQuery
// Query: *[_type == "post" && references(*[_type == "postCategory" && slug.current == $slug]._id)]{   ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,}| order(_createdAt desc)
export type GetBlogPostsInCategoryQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
}>;
// Variable: getAuthorBySlugQuery
// Query: *[_type == "author" && slug.current == $slug][0]{       ...,    "image": image.asset->url,    "slug": slug.current}
export type GetAuthorBySlugQueryResult = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  designation?: string;
  slug: string | null;
  image: string | null;
  bio?: string;
  about?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  socials?: Array<{
    icon?: string;
    url?: string;
    _key: string;
  }>;
} | null;
// Variable: getAuthorsQuery
// Query: *[_type == "author"]{          ...,    "image": image.asset->url,    "slug": slug.current   }
export type GetAuthorsQueryResult = Array<{
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  designation?: string;
  slug: string | null;
  image: string | null;
  bio?: string;
  about?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  socials?: Array<{
    icon?: string;
    url?: string;
    _key: string;
  }>;
}>;
// Variable: getAuthorBlogsQuery
// Query: *[_type == "post" && author->slug.current == $slug]{       ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,   }
export type GetAuthorBlogsQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
}>;
// Variable: getAllTagsQuery
// Query: *[_type == "post"].tags[] | order(_id asc)
export type GetAllTagsQueryResult = Array<string | null>;
// Variable: settingsQuery
// Query: *[_type == "settings"][0]
export type SettingsQueryResult = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  socialFields?: SocialFields;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal";
    listItem?: never;
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  ogImage?: {
    title?: string;
  };
} | null;
// Variable: indexQuery
// Query: *[_type == "post"] | order(date desc, _updatedAt desc) {   ...,  body, "slug": slug.current,  categories[] ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  author ->{        ...,    "image": image.asset->url,    "slug": slug.current  },  "mainImage": mainImage.asset->url,}
export type IndexQueryResult = Array<{
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug: string | null;
  author: {
    _id: string;
    _type: "author";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    name?: string;
    designation?: string;
    slug: string | null;
    image: string | null;
    bio?: string;
    about?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal";
      listItem?: never;
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
    socials?: Array<{
      icon?: string;
      url?: string;
      _key: string;
    }>;
  } | null;
  excerpt?: string;
  seoKeywords?: Array<string>;
  mainImage: string | null;
  categories: Array<{
    _id: string;
    _type: "blogCategory";
    _createdAt: string;
    _updatedAt: string;
    _rev: string;
    title?: string;
    description?: string;
    image: string | null;
    slug: string | null;
  }> | null;
  publishedAt?: string;
  tags?: Array<string>;
  isFeatured?: boolean;
  body: BlockContent | null;
  isSeries?: boolean;
  series?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "series";
  };
}>;
// Variable: CASE_STUDIES_QUERY
// Query: *[_type == "caseStudy" && defined(slug.current)][0...12]{  _id, title, slug}
export type CASE_STUDIES_QUERYResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
}>;
// Variable: CASE_STUDY_QUERY
// Query: *[_type == "post" && slug.current == $slug][0]{  title, body, mainImage}
export type CASE_STUDY_QUERYResult = {
  title: string | null;
  body: BlockContent | null;
  mainImage: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    caption?: string;
    alt?: string;
    _type: "image";
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n*[_type == \"post\"]{\n  \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n}": GetAllPostsQueryResult;
    "\n*[_type == \"post\" && slug.current == $slug][0] {\n   excerpt,\n   \"slug\": slug.current,\n   tags,\n   title,\n   seo,\n   _updatedAt,\n   _createdAt,\n  author ->{\n      name\n    },\n  \"mainImage\": mainImage.asset->url,\n}": GetPostMetadataQueryResult;
    "\n*[_type == \"post\" && isFeatured == true]{\n  \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n}| order(_createdAt desc)": GetFeaturedPostsQueryResult;
    "\n*[_type == \"post\" && slug.current == $slug][0] {\n  \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n  'comments':*[\n     _type==\"comment\" &&\n     post._ref==^._id &&\n    approved == true],\n}\n": GetPostBySlugQueryResult;
    "\n*[_type == \"post\" && $postTag in tags]{\n  \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n}\n": GetPostsUnderTagQueryResult;
    "\n*[_type=='post' && title match $searchTerm || description match  $searchTerm || categories match  $searchTerm  ]{\n  \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n}\n": SearchPostsQueryResult;
    "\n*[_type == \"comment\" && post->slug.current == $slug]\n": GetPostCommentsQueryResult;
    "\n*[_type == \"postCategory\"]{\n   \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n }": GetCategoriesQueryResult;
    "\n*[_type == \"post\" && references(*[_type == \"postCategory\" && slug.current == $slug]._id)]{\n  \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n}| order(_createdAt desc)": GetBlogPostsInCategoryQueryResult;
    "\n*[_type == \"author\" && slug.current == $slug][0]{\n   \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n}": GetAuthorBySlugQueryResult;
    "\n*[_type == \"author\"]{\n      \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n   }\n": GetAuthorsQueryResult;
    "\n*[_type == \"post\" && author->slug.current == $slug]{\n      \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n   }\n": GetAuthorBlogsQueryResult;
    "*[_type == \"post\"].tags[] | order(_id asc)": GetAllTagsQueryResult;
    "*[_type == \"settings\"][0]": SettingsQueryResult;
    "\n*[_type == \"post\"] | order(date desc, _updatedAt desc) {\n  \n ...,\n  body,\n \"slug\": slug.current,\n  categories[] ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  author ->{\n    \n    ...,\n    \"image\": image.asset->url,\n    \"slug\": slug.current\n\n  },\n  \"mainImage\": mainImage.asset->url,\n\n}": IndexQueryResult;
    "*[_type == \"caseStudy\" && defined(slug.current)][0...12]{\n  _id, title, slug\n}": CASE_STUDIES_QUERYResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n  title, body, mainImage\n}": CASE_STUDY_QUERYResult;
  }
}
